- name: test
  hosts: localhost
  vars_files:
  - variables.yml

  tasks:
    - pip:
        name: boto3
    - name: Gather EC2 facts.
      ec2_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        filters:
          "tag:backup": "yes"
      register: ec2_facts
    - name: Print the name of the instances
      debug:
        msg: "Instance Tag name is: '{{ item.tags.Name }}'"
      with_items: "{{ ec2_facts.instances }}"

    - name: Snapshot the instance
      ec2_snapshot:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        instance_id: "{{ item.instance_id }}"
        device_name: "{{ item.root_device_name }}"
        wait: no
        description: "awsbackup snapshot taken on {{ ansible_date_time.date }} at {{ ansible_date_time.time }}"
        snapshot_tags:
          Name: "{{ item.tags.substack }}_{{ INCREMENTAL }}_{{ ansible_date_time.date }}"
          identifier: awsbackup
          instance: "{{ item.tags.substack }}"
          incremental: "{{ INCREMENTAL }}"
      with_items: "{{ ec2_facts.instances }}"
      register: snap
  
  
    - name: Print the snapshot ids
      debug:
        msg: "{{ item.snapshot_id }}"
      with_items: "{{ snap.results }}"
  
    
    - name: Find snapshots.
      ec2_snapshot_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        filters:
          "tag:identifier": "awsbackup"
          "tag:incremental": "{{ INCREMENTAL }}"
      register: ec2_snapshot_facts


    - name: Print snapshot facts
      debug:
        msg: "{{ ec2_snapshot_facts }}" 


    - name: Get ordered list of snapshots for stack.
      set_fact:
        snaps_fact_list:  "{{ ec2_snapshot_facts.snapshots|selectattr('tags.identifier', 'equalto', 'awsbackup')|selectattr('tags.incremental', 'equalto', INCREMENTAL)|selectattr('tags.instance', 'equalto', item.tags.substack)|sort(attribute='start_time')|reverse|map(attribute='snapshot_id')|list }}"
      with_items: "{{ ec2_facts.instances }}"
      register: snaps_fact_list_register 


    - name: Cut the list by our COUNT variable.
      set_fact:
        snaps_cut: "{{ item.ansible_facts['snaps_fact_list'][2:] }}"
      with_items: "{{ snaps_fact_list_register.results }}"
      register: snaps_cut_register


    - name: Intialize an empty list for sanps_joined
      set_fact:
          snaps_joined: []


    - name: Join the nested list of snapshots that will be deleted.
      set_fact:
        snaps_joined: "{{ snaps_joined }} + {{ item.ansible_facts.snaps_cut }}"
      with_items: "{{ snaps_cut_register.results }}"
      register: snaps_joined_register


    - name: Delete snapshots in the nested list of snapshots.
      ec2_snapshot:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        state: absent
        snapshot_id: "{{ item }}"
      with_items: "{{ snaps_joined }}"
      register: deleted_snapshots
